{"version":3,"sources":["index.tsx"],"names":["Checkbox","props","name","children","checkBoxProps","rest","setFieldValue","setFieldTouched","handleBlur","field","error","isChecked","value"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAOO,MAAMA,QAAiC,GAC5CC,KAD+C,IAE5C;AACH,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,aAAlB;AAAiC,OAAGC;AAApC,MAA6CJ,KAAnD;AACA,QAAM;AAAEK,IAAAA,aAAF;AAAiBC,IAAAA,eAAjB;AAAkCC,IAAAA;AAAlC,MAAiD,+BAAvD;AACA,QAAM,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAqB,sBAASR,IAAT,CAA3B;AACA,QAAMS,SAAS,GAAGF,KAAK,CAACG,KAAxB;AAEA,sBACE,6BAAC,oBAAD;AACE,IAAA,SAAS,EAAE,CAAC,CAACF,KADf;AAEE,IAAA,SAAS,EAAEC,SAFb;AAGE,IAAA,KAAK,EAAEF,KAAK,CAACG,KAHf;AAIE,IAAA,QAAQ,EAAE,MAAM;AACdN,MAAAA,aAAa,CAACJ,IAAD,EAAO,CAACO,KAAK,CAACG,KAAd,CAAb;AACD,KANH;AAOE,IAAA,MAAM,EAAE,MAAM;AACZL,MAAAA,eAAe,CAACL,IAAD,CAAf;AACAM,MAAAA,UAAU,CAACN,IAAD,CAAV;AACD;AAVH,KAWME,aAXN,EAYMC,IAZN,GAcGF,QAdH,CADF;AAkBD,CA1BM","sourcesContent":["import { Checkbox as NBCheckbox, ICheckboxProps } from 'native-base';\nimport { useField, useFormikContext } from 'formik';\nimport React, { FC, ReactNode } from 'react';\nimport type { BaseProps } from '../../props';\nexport type CheckboxSingleProps = BaseProps & {\n  checkBoxProps?: ICheckboxProps;\n  children: ReactNode;\n};\n\nexport const Checkbox: FC<CheckboxSingleProps> = (\n  props: CheckboxSingleProps\n) => {\n  const { name, children, checkBoxProps, ...rest } = props;\n  const { setFieldValue, setFieldTouched, handleBlur } = useFormikContext();\n  const [field, { error }] = useField(name);\n  const isChecked = field.value;\n\n  return (\n    <NBCheckbox\n      isInvalid={!!error}\n      isChecked={isChecked}\n      value={field.value}\n      onChange={() => {\n        setFieldValue(name, !field.value);\n      }}\n      onBlur={() => {\n        setFieldTouched(name);\n        handleBlur(name);\n      }}\n      {...checkBoxProps}\n      {...rest}\n    >\n      {children}\n    </NBCheckbox>\n  );\n};\n"]}