{"version":3,"sources":["index.tsx"],"names":["Input","props","name","inputProps","rest","field","handleChange","handleBlur","setFieldTouched","value"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAIO,MAAMA,KAAqB,GAAIC,KAAD,IAAuB;AAC1D,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,UAAR;AAAoB,OAAGC;AAAvB,MAAgCH,KAAtC;AACA,QAAM,CAACI,KAAD,IAAU,sBAASH,IAAT,CAAhB;AACA,QAAM;AAAEI,IAAAA,YAAF;AAAgBC,IAAAA,UAAhB;AAA4BC,IAAAA;AAA5B,MAAqD,+BAA3D;AACA,sBACE,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAEH,KAAK,CAACI;AADf,KAEMN,UAFN,EAGMC,IAHN;AAIE,IAAA,YAAY,EAAEE,YAAY,CAACJ,IAAD,CAJ5B;AAKE,IAAA,MAAM,EAAE,MAAM;AACZM,MAAAA,eAAe,CAACN,IAAD,CAAf;AACAK,MAAAA,UAAU,CAACL,IAAD,CAAV;AACD;AARH,KADF;AAYD,CAhBM;;;eAkBQF,K","sourcesContent":["import { Input as NBInput, IInputProps } from 'native-base';\nimport { useField, useFormikContext } from 'formik';\nimport React, { FC } from 'react';\nimport type { BaseProps } from '../../props';\nexport type InputProps = BaseProps & { inputProps?: IInputProps };\n\nexport const Input: FC<InputProps> = (props: InputProps) => {\n  const { name, inputProps, ...rest } = props;\n  const [field] = useField(name);\n  const { handleChange, handleBlur, setFieldTouched }: any = useFormikContext();\n  return (\n    <NBInput\n      value={field.value}\n      {...inputProps}\n      {...rest}\n      onChangeText={handleChange(name)}\n      onBlur={() => {\n        setFieldTouched(name);\n        handleBlur(name);\n      }}\n    />\n  );\n};\n\nexport default Input;\n"]}