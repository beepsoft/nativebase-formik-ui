{"version":3,"sources":["index.tsx"],"names":["CheckboxControl","props","name","label","children","checkBoxProps","rest","setFieldValue","setFieldTouched","handleBlur","field","error","isChecked","value","layoutProps","remainingProps","defaultProps","mt"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;AAOO,MAAMA,eAAyC,GACpDC,KADuD,IAEpD;AACH,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,QAAf;AAAyBC,IAAAA,aAAzB;AAAwC,OAAGC;AAA3C,MAAoDL,KAA1D;AAEA,QAAM;AAAEM,IAAAA,aAAF;AAAiBC,IAAAA,eAAjB;AAAkCC,IAAAA;AAAlC,MAAiD,+BAAvD;AACA,QAAM,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAqB,sBAAST,IAAT,CAA3B;AACA,QAAMU,SAAS,GAAGF,KAAK,CAACG,KAAxB;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC,2BAAeT,IAAf,CAAtC;AACA,QAAMU,YAAY,GAAG;AAAEC,IAAAA,EAAE,EAAE;AAAN,GAArB;AACA,sBACE,6BAAC,wBAAD;AAAa,IAAA,IAAI,EAAEf,IAAnB;AAAyB,IAAA,KAAK,EAAEC;AAAhC,KAA2CW,WAA3C,gBACE,6BAAC,oBAAD;AACE,IAAA,SAAS,EAAE,CAAC,CAACH,KADf;AAEE,IAAA,SAAS,EAAEC,SAFb;AAGE,IAAA,KAAK,EAAEF,KAAK,CAACG,KAHf;AAIE,IAAA,QAAQ,EAAE,MAAM;AACdN,MAAAA,aAAa,CAACL,IAAD,EAAO,CAACQ,KAAK,CAACG,KAAd,CAAb;AACD,KANH;AAOE,IAAA,MAAM,EAAE,MAAM;AACZL,MAAAA,eAAe,CAACN,IAAD,CAAf;AACAO,MAAAA,UAAU,CAACP,IAAD,CAAV;AACD;AAVH,KAWMc,YAXN,EAYMX,aAZN,EAaMU,cAbN,GAeGX,QAfH,CADF,CADF;AAqBD,CA/BM","sourcesContent":["import { Checkbox, ICheckboxProps } from 'native-base';\nimport { useField, useFormikContext } from 'formik';\nimport React, { FC, ReactNode } from 'react';\nimport type { BaseProps, LayoutProps } from '../../props';\nimport { FormControl } from '../../form-control';\nimport { getLayoutProps } from '../../../utils';\nexport type CheckboxControlProps = BaseProps & {\n  checkBoxProps?: ICheckboxProps;\n  children: ReactNode;\n  layoutProps?: LayoutProps;\n};\n\nexport const CheckboxControl: FC<CheckboxControlProps> = (\n  props: CheckboxControlProps\n) => {\n  const { name, label, children, checkBoxProps, ...rest } = props;\n\n  const { setFieldValue, setFieldTouched, handleBlur } = useFormikContext();\n  const [field, { error }] = useField(name);\n  const isChecked = field.value;\n  const [layoutProps, remainingProps] = getLayoutProps(rest);\n  const defaultProps = { mt: 2 };\n  return (\n    <FormControl name={name} label={label} {...layoutProps}>\n      <Checkbox\n        isInvalid={!!error}\n        isChecked={isChecked}\n        value={field.value}\n        onChange={() => {\n          setFieldValue(name, !field.value);\n        }}\n        onBlur={() => {\n          setFieldTouched(name);\n          handleBlur(name);\n        }}\n        {...defaultProps}\n        {...checkBoxProps}\n        {...remainingProps}\n      >\n        {children}\n      </Checkbox>\n    </FormControl>\n  );\n};\n"]}