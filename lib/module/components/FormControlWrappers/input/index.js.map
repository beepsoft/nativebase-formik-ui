{"version":3,"sources":["index.tsx"],"names":["Input","useField","useFormikContext","React","getLayoutProps","FormControl","InputControl","props","name","label","inputProps","rest","field","handleChange","handleBlur","setFieldTouched","layoutProps","remainingProps","defaultProps","mt","value"],"mappings":";;AAAA,SAASA,KAAT,QAAmC,aAAnC;AACA,SAASC,QAAT,EAAmBC,gBAAnB,QAA2C,QAA3C;AACA,OAAOC,KAAP,MAA0B,OAA1B;AAEA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AAGA,OAAO,MAAMC,YAA4B,GAAIC,KAAD,IAAuB;AACjE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,UAAf;AAA2B,OAAGC;AAA9B,MAAuCJ,KAA7C;AAEA,QAAM,CAACK,KAAD,IAAUX,QAAQ,CAACO,IAAD,CAAxB;AACA,QAAM;AAAEK,IAAAA,YAAF;AAAgBC,IAAAA,UAAhB;AAA4BC,IAAAA;AAA5B,MAAqDb,gBAAgB,EAA3E;AACA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCb,cAAc,CAACO,IAAD,CAApD;AACA,QAAMO,YAAY,GAAG;AAAEC,IAAAA,EAAE,EAAE;AAAN,GAArB;AACA,sBACE,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAEX,IAAnB;AAAyB,IAAA,KAAK,EAAEC;AAAhC,KAA2CO,WAA3C,gBACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAEJ,KAAK,CAACQ;AADf,KAEMV,UAFN,EAGMQ,YAHN,EAIMD,cAJN;AAKE,IAAA,YAAY,EAAEJ,YAAY,CAACL,IAAD,CAL5B;AAME,IAAA,MAAM,EAAE,MAAM;AACZO,MAAAA,eAAe,CAACP,IAAD,CAAf;AACAM,MAAAA,UAAU,CAACN,IAAD,CAAV;AACD;AATH,KADF,CADF;AAeD,CAtBM;AAwBP,eAAeF,YAAf","sourcesContent":["import { Input, IInputProps } from 'native-base';\nimport { useField, useFormikContext } from 'formik';\nimport React, { FC } from 'react';\nimport type { BaseProps, LayoutProps } from '../../props';\nimport { getLayoutProps } from '../../../utils';\nimport { FormControl } from '../../form-control';\ntype InputProps = BaseProps & LayoutProps & { inputProps?: IInputProps };\n\nexport const InputControl: FC<InputProps> = (props: InputProps) => {\n  const { name, label, inputProps, ...rest } = props;\n\n  const [field] = useField(name);\n  const { handleChange, handleBlur, setFieldTouched }: any = useFormikContext();\n  const [layoutProps, remainingProps] = getLayoutProps(rest);\n  const defaultProps = { mt: 2 };\n  return (\n    <FormControl name={name} label={label} {...layoutProps}>\n      <Input\n        value={field.value}\n        {...inputProps}\n        {...defaultProps}\n        {...remainingProps}\n        onChangeText={handleChange(name)}\n        onBlur={() => {\n          setFieldTouched(name);\n          handleBlur(name);\n        }}\n      />\n    </FormControl>\n  );\n};\n\nexport default InputControl;\n"]}