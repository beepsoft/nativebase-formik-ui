{"version":3,"sources":["index.tsx"],"names":["TextArea","NBTextArea","useField","useFormikContext","React","FormControl","getLayoutProps","TextAreaControl","props","name","TextAreaProps","label","rest","field","handleChange","handleBlur","setFieldTouched","layoutProps","remainingProps","defaultProps","mt","value"],"mappings":";;AAAA,SAASA,QAAQ,IAAIC,UAArB,QAAoD,aAApD;AACA,SAASC,QAAT,EAAmBC,gBAAnB,QAA2C,QAA3C;AACA,OAAOC,KAAP,MAA0B,OAA1B;AAEA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,cAAT,QAA+B,gBAA/B;AAIA,OAAO,MAAMC,eAAkC,GAAIC,KAAD,IAA0B;AAC1E,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,aAAR;AAAuBC,IAAAA,KAAvB;AAA8B,OAAGC;AAAjC,MAA0CJ,KAAhD;AACA,QAAM,CAACK,KAAD,IAAUX,QAAQ,CAACO,IAAD,CAAxB;AACA,QAAM;AAAEK,IAAAA,YAAF;AAAgBC,IAAAA,UAAhB;AAA4BC,IAAAA;AAA5B,MAAqDb,gBAAgB,EAA3E;AACA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCZ,cAAc,CAACM,IAAD,CAApD;AACA,QAAMO,YAAY,GAAG;AAAEC,IAAAA,EAAE,EAAE;AAAN,GAArB;AACA,sBACE,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAEX,IAAnB;AAAyB,IAAA,KAAK,EAAEE;AAAhC,KAA2CM,WAA3C,gBACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAEJ,KAAK,CAACQ;AADf,KAEMX,aAFN,EAGMS,YAHN,EAIMD,cAJN;AAKE,IAAA,YAAY,EAAEJ,YAAY,CAACL,IAAD,CAL5B;AAME,IAAA,MAAM,EAAE,MAAM;AACZO,MAAAA,eAAe,CAACP,IAAD,CAAf;AACAM,MAAAA,UAAU,CAACN,IAAD,CAAV;AACD;AATH,KADF,CADF;AAeD,CArBM;AAuBP,eAAeF,eAAf","sourcesContent":["import { TextArea as NBTextArea, IInputProps } from 'native-base';\nimport { useField, useFormikContext } from 'formik';\nimport React, { FC } from 'react';\nimport type { BaseProps } from '../../props';\nimport { FormControl } from '../../form-control';\nimport { getLayoutProps } from '../../../utils';\n\ntype TextAreaProps = BaseProps & { TextAreaProps?: IInputProps };\n\nexport const TextAreaControl: FC<TextAreaProps> = (props: TextAreaProps) => {\n  const { name, TextAreaProps, label, ...rest } = props;\n  const [field] = useField(name);\n  const { handleChange, handleBlur, setFieldTouched }: any = useFormikContext();\n  const [layoutProps, remainingProps] = getLayoutProps(rest);\n  const defaultProps = { mt: 2 };\n  return (\n    <FormControl name={name} label={label} {...layoutProps}>\n      <NBTextArea\n        value={field.value}\n        {...TextAreaProps}\n        {...defaultProps}\n        {...remainingProps}\n        onChangeText={handleChange(name)}\n        onBlur={() => {\n          setFieldTouched(name);\n          handleBlur(name);\n        }}\n      />\n    </FormControl>\n  );\n};\n\nexport default TextAreaControl;\n"]}